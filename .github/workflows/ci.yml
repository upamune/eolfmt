name: CI

on:
  push:
    branches: [ main ]
  pull_request:
    branches: [ main ]

permissions:
  contents: read

jobs:
  test:
    name: Test
    runs-on: ${{ matrix.os }}
    strategy:
      matrix:
        os: [ubuntu-latest, macos-latest, windows-latest]
        go: ['1.22', '1.23', '1.24']
    steps:
    - uses: actions/checkout@11bd71901bbe5b1630ceea73d27597364c9af683 # v4.2.2

    - name: Set up Go
      uses: actions/setup-go@d35c59abb061a4a6fb18e82ac0862c26744d6ab5 # v5.5.0
      with:
        go-version: ${{ matrix.go }}

    - name: Cache Go modules
      uses: actions/cache@5a3ec84eff668545956fd18022155c47e93e2684 # v4.2.3
      with:
        path: |
          ~/go/pkg/mod
          ~/.cache/go-build
          ~/Library/Caches/go-build
          %LocalAppData%\go-build
        key: ${{ runner.os }}-go-${{ matrix.go }}-${{ hashFiles('**/go.sum') }}
        restore-keys: |
          ${{ runner.os }}-go-${{ matrix.go }}-

    - name: Download dependencies
      run: go mod download

    - name: Run tests
      run: go test -v -race -coverprofile=coverage.txt -covermode=atomic ./...

    - name: Upload coverage
      uses: codecov/codecov-action@b9fd7d16f6d7d1b5d2bec1a2887e65ceed900238 # v4.6.0
      if: matrix.os == 'ubuntu-latest' && matrix.go == '1.24'
      with:
        file: ./coverage.txt
        flags: unittests
        name: codecov-umbrella
        fail_ci_if_error: false

  lint:
    name: Lint
    runs-on: ubuntu-latest
    steps:
    - uses: actions/checkout@11bd71901bbe5b1630ceea73d27597364c9af683 # v4.2.2

    - name: Set up Go
      uses: actions/setup-go@d35c59abb061a4a6fb18e82ac0862c26744d6ab5 # v5.5.0
      with:
        go-version: '1.24'

    - name: Install revive
      run: go install github.com/mgechev/revive@latest

    - name: Run linter
      run: make lint

  build:
    name: Build
    runs-on: ${{ matrix.os }}
    strategy:
      matrix:
        os: [ubuntu-latest, macos-latest, windows-latest]
        go: ['1.24']
    steps:
    - uses: actions/checkout@11bd71901bbe5b1630ceea73d27597364c9af683 # v4.2.2

    - name: Set up Go
      uses: actions/setup-go@d35c59abb061a4a6fb18e82ac0862c26744d6ab5 # v5.5.0
      with:
        go-version: ${{ matrix.go }}

    - name: Build
      run: go build -v ./cmd/eolfmt

    - name: Check binary
      run: ./eolfmt -version
      if: matrix.os != 'windows-latest'

    - name: Check binary (Windows)
      run: .\eolfmt.exe -version
      if: matrix.os == 'windows-latest'

  integration:
    name: Integration Test
    runs-on: ubuntu-latest
    needs: [test, lint, build]
    steps:
    - uses: actions/checkout@11bd71901bbe5b1630ceea73d27597364c9af683 # v4.2.2

    - name: Set up Go
      uses: actions/setup-go@d35c59abb061a4a6fb18e82ac0862c26744d6ab5 # v5.5.0
      with:
        go-version: '1.24'

    - name: Build binary
      run: go build -o eolfmt ./cmd/eolfmt

    - name: Create test files
      run: |
        mkdir -p test-dir/sub
        echo -n "no newline" > test-dir/file1.txt
        echo "with newline" > test-dir/file2.txt
        echo -n "no newline in sub" > test-dir/sub/file3.txt

    - name: Run eolfmt
      run: ./eolfmt test-dir

    - name: Verify files have newlines
      run: |
        for file in test-dir/file1.txt test-dir/file2.txt test-dir/sub/file3.txt; do
          if [ "$(tail -c 1 "$file" | wc -l)" -eq 0 ]; then
            echo "ERROR: $file does not end with newline"
            exit 1
          fi
        done

    - name: Run eolfmt again (should modify 0 files)
      run: |
        output=$(./eolfmt test-dir 2>&1)
        echo "$output"
        if ! echo "$output" | grep -q "0 modified"; then
          echo "ERROR: Second run should not modify any files"
          exit 1
        fi
